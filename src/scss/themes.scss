// @use "../node_modules/@angular/material/theming" as *;

@use "@angular/material" as mat;
@use "sass:map" as map;
@use "sass:meta" as meta;
@use "sass:color" as color;

@include mat.core();

// $my-light-palette: (
//   100: #cb997e,
//   200: #ddbea9,
//   300: #ffe8d6,
//   400: #b7b7a4,
//   500: #a5a58d,
//   600: #6b705c,
//   contrast: (
//     100: black,
//     200: black,
//     300: black,
//     400: black,
//     500: black,
//     600: white,
//   ),
// );
// $my-dark-palette: (
//   100: #bf805f,
//   200: #af7046,
//   300: #662c00,
//   400: #5b5b48,
//   500: #39392d,
//   600: #151612,
//   contrast: (
//     100: white,
//     200: white,
//     300: white,
//     400: white,
//     500: white,
//     600: white,
//   ),
// );

// background-color: var(--color-50);
// color: var(--contrast-color-50);
$my-light-palette-main: (
  50: hsl(42, 75%, 94%),
  100: hsl(38, 81%, 85%),
  200: hsl(39, 81%, 76%),
  300: hsl(38, 81%, 67%),
  400: hsl(37, 82%, 61%),
  500: hsl(34, 82%, 58%),
  600: hsl(32, 79%, 56%),
  700: hsl(29, 74%, 54%),
  800: hsl(26, 71%, 52%),
  900: hsl(22, 69%, 48%),
  contrast: (
    50: #000,
    100: #000,
    200: #000,
    300: #000,
    400: #000,
    500: #000,
    600: #000,
    700: #000,
    800: #000,
    900: #fff,
  ),
);
$my-dark-palette-main: (
  50: hsl(22, 69%, 48%),
  100: hsl(26, 71%, 52%),
  200: hsl(29, 74%, 54%),
  300: hsl(32, 79%, 56%),
  400: hsl(34, 82%, 58%),
  500: hsl(37, 82%, 61%),
  600: hsl(38, 81%, 67%),
  700: hsl(39, 81%, 76%),
  800: hsl(38, 81%, 85%),
  900: hsl(42, 75%, 94%),
  contrast: (
    50: #fff,
    100: #000,
    200: #000,
    300: #000,
    400: #000,
    500: #000,
    600: #000,
    700: #000,
    800: #000,
    900: #000,
  ),
);

$my-light-palette-accent: (
  50: hsl(86, 58%, 95%),
  100: hsl(86, 57%, 88%),
  200: hsl(86, 57%, 81%),
  300: hsl(85, 55%, 74%),
  400: hsl(85, 53%, 69%),
  500: hsl(84, 53%, 64%),
  600: hsl(82, 42%, 59%),
  700: hsl(79, 31%, 53%),
  800: hsl(75, 25%, 47%),
  900: hsl(67, 17%, 37%),
  contrast: (
    50: #000,
    100: #000,
    200: #000,
    300: #000,
    400: #000,
    500: #000,
    600: #000,
    700: #000,
    800: #000,
    900: #fff,
  ),
);
$my-dark-palette-accent: (
  50: hsl(67, 17%, 37%),
  100: hsl(75, 25%, 47%),
  200: hsl(79, 31%, 53%),
  300: hsl(82, 42%, 59%),
  400: hsl(84, 53%, 64%),
  500: hsl(85, 53%, 69%),
  600: hsl(85, 55%, 74%),
  700: hsl(86, 57%, 81%),
  800: hsl(86, 57%, 88%),
  900: hsl(86, 58%, 95%),
  contrast: (
    50: #fff,
    100: #000,
    200: #000,
    300: #000,
    400: #000,
    500: #000,
    600: #000,
    700: #000,
    800: #000,
    900: #000,
  ),
);

$light-theme: mat.define-light-theme(
  (
    color: (
      primary: mat.define-palette($my-light-palette-main, 50, 100, 200),
      accent: mat.define-palette($my-light-palette-accent, 300, 400),
      warn: mat.define-palette($my-light-palette-main, 200),
    ),
    typography: mat.define-typography-config(),
    density: 0,
  )
);

$dark-theme: mat.define-dark-theme(
  (
    color: (
      primary: mat.define-palette($my-dark-palette-main, 100, 200, 300),
      accent: mat.define-palette($my-dark-palette-accent, 300, 400),
      warn: mat.define-palette($my-dark-palette-main, 200),
    ),
    density: 0,
  )
);

/*
Link to color documentation:
https://mui.com/material-ui/customization/color/

Angular Material documentation topic:
https://material.angular.io/guide/theming

In case of not single named color do something like this: "$mat-light-green".

Depending on how many colors you create, add them all to the dedicated color theme.
*/

@mixin createCSSVars($theme) {
  @if ($theme == "light") {
    @include formatPaletteToCSSVar("main", $my-light-palette-main);
    @include formatPaletteToCSSVar("accent", $my-light-palette-accent);
  }
  @if ($theme == "dark") {
    @include formatPaletteToCSSVar("main", $my-dark-palette-main);
    @include formatPaletteToCSSVar("accent", $my-dark-palette-accent);
  }
}

@mixin formatPaletteToCSSVar($main-accent, $palettes...) {
  @each $palette in $palettes {
    @each $name, $value in $palette {
      @if (meta.type-of($value) == map) {
        @each $contrastName, $contrastValue in $value {
          --contrast-color-#{$main-accent}-#{$contrastName}: #{$contrastValue};
        }
      } @else {
        --color-#{$main-accent}-#{$name}: #{$value};
      }
    }
  }
}
